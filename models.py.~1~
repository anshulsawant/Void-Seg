from tensorflow import keras
from keras import layers

class DownBlock(layers.Layer):
  def __init__(self, filters, bn=True, dropout=0.2):
    super(DownBlock, self).__init__()
    self.conv_1 = layers.Conv2D(filters, 3, padding="same", activation=layers.LeakyReLU())
    self.concat = layers.Concatenate()
    self.conv_2 = layers.Conv2D(filters, 3, padding="same", activation=layers.LeakyReLU())
    self.bn = None
    if bn:
      self.bn = layers.BatchNormalization()
    self.dropout = None
    if dropout > 0.0:
      self.dropout = layers.Dropout(dropout)
    self.mp = layers.MaxPooling2D(padding="valid")

  def call(self, inputs):
    t1 = self.conv_1(inputs)
    t2 = self.concat([inputs, t1])
    t2 = self.conv_2(t2)
    if self.dropout:
      t2 = self.dropout(t2)
    if self.bn:
      t2 = self.bn(t2)
    return self.mp(t2)



class UpBlock(layers.Layer):
    def __init__(self, filters, bn=True, dropout=0.2):
        super(UpBlock, self).__init__()
        self.conv_1 = layers.Conv2D(filters, 3, padding="same", activation=layers.LeakyReLU())
        self.bn_1 = layers.BatchNormalization() if bn else None
        self.conv_2 = layers.Conv2D(filters, 3, padding="same", activation=layers.LeakyReLU())
        self.bn_2 = layers.BatchNormalization() if bn else None
        self.upsample = layers.Conv2DTranspose(filters//2, 2, 2, padding="valid")

    def call(t):
      t1 = self.conv_1(t)
      if bn:
          t1 = bn_1(t1)
      t2 = self.conv_2(layers.concatenate([t, t1]))
      if bn:
          t2 = bn_1(t2)
      t3 = layers.Conv2DTranspose(layers.concatenate([t, t1, t2]))
      if (dropout > 0.0):
          t3 = layers.Dropout(dropout)(t3)
      return (t1, t2, t3)


class Backbone(layers.Layer):
  def __init__(self):
    super(Backbone, self).__init__()
    self.down_1 = DownBlock(4)
    self.down_2 = DownBlock(8)
    self.down_3 = DownBlock(16)
    self.down_4 = DownBlock(32)
    self.down_5 = DownBlock(64)

  def call(self, inputs):
    x0 = self.down_1(inputs)
    x1 = self.down_2(x0)
    x2 = self.down_3(x1)
    x3 = self.down_4(x2)
    x4 = self.down_5(x3)
    return (x1, x2, x3, x4)

class UpsampleAndAdd(layers.Layer):
  def __init__(self):
    super(UpsampleAndAdd, self).__init__()
    self.conv = layers.Conv2D(256, (1,1))
    self.up = layers.Conv2DTranspose(256, 2, 2, padding="valid")
    self.add = layers.Add()
  def call(self, x, y):
    x1 = self.conv(x)
    y1 = self.up(y)
    return self.add([x1, y1])

## Feature pyramid layer
class FeaturePyramid(layers.Layer):
  def __init__(self):
    super(Fpn, self).__init__()
    self.conv_1 = layers.Conv2D(256, (1,1))
    self.ua_1 = UpsampleAndAdd()
    self.ua_2 = UpsampleAndAdd()
    self.ua_3 = UpsampleAndAdd()
    self.conv_2 = layers.Conv2D(256, (3,3), padding="same")
    self.conv_3 = layers.Conv2D(256, (3,3), padding="same")
    self.conv_4 = layers.Conv2D(256, (3,3), padding="same")
    self.conv_5 = layers.Conv2D(256, (3,3), padding="same")
    self.mp = layers.MaxPooling2D(pool_size=(1,1), strides=2)

  def call(self, x1, x2, x3, x4):
    y4 = self.conv_1(x4)
    y3 = self.ua_1(x3, y4)
    y2 = self.ua_2(x2, y3)
    y1 = self.ua_3(x1, y2)
    return (self.conv_2(y1), self.conv_3(y2), self.conv_4(y3), self.conv_5(y4), self.mp(y4))
